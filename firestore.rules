rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to get user role
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && getUserRole(request.auth.uid) == 'admin';
    }
    
    // Helper function to check if user has warehouse access
    function hasWarehouseAccess() {
      return isAuthenticated() && getUserRole(request.auth.uid) in ['admin', 'warehouse_staff'];
    }
    
    // Helper function to check if user can create orders
    function canCreateOrders() {
      return isAuthenticated() && getUserRole(request.auth.uid) in ['admin', 'warehouse_staff', 'internal_user'];
    }
    
    // Users collection - role-based access control
    match /users/{userId} {
      // Users can read and update their own profile
      allow read, update: if isAuthenticated() && request.auth.uid == userId;
      
      // Admins and warehouse staff can read all users (needed for order/inventory management)
      allow read: if isAdmin() || hasWarehouseAccess();
      
      // Admins can update user roles and data (except their own role)
      allow update: if isAdmin() && (
        request.auth.uid != userId || 
        !('role' in request.resource.data) ||
        request.resource.data.role == resource.data.role
      );
      
      // Allow user creation during signup and by Cloud Functions
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow create: if request.auth.token.firebase.sign_in_provider == 'custom';
      
      // Admins can delete users (except themselves)
      allow delete: if isAdmin() && request.auth.uid != userId;
    }
    
    // Access requests collection
    match /accessRequests/{requestId} {
      // Anyone can create access requests
      allow create: if true;
      
      // Users can read their own requests, admins and warehouse staff can read all
      allow read: if isAuthenticated() && (
        resource.data.email == request.auth.token.email ||
        isAdmin() ||
        hasWarehouseAccess()
      );
      
      // Only admins can update/delete access requests
      allow update, delete: if isAdmin();
    }
    
    // Inventory collection - warehouse, admin, and supplier access
    match /inventory/{itemId} {
      // All authenticated users can read inventory
      allow read: if isAuthenticated();
      
      // Warehouse staff and admins can modify inventory (same permissions)
      allow create, update, delete: if hasWarehouseAccess();
      
      // Suppliers can create and update inventory items (for quantity request responses)
      allow create, update: if isAuthenticated() && getUserRole(request.auth.uid) == 'supplier';
      
      // Internal users can only update specific fields for stock operations (reservedQuantity, quantity, status)
      allow update: if isAuthenticated() && 
        getUserRole(request.auth.uid) == 'internal_user' &&
        // Only allow updates to reservedQuantity, quantity, status, lastUpdated, and updatedBy fields
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reservedQuantity', 'quantity', 'status', 'lastUpdated', 'updatedBy']) &&
        // Ensure quantity can only decrease (for stock deduction) or stay the same
        request.resource.data.quantity <= resource.data.quantity &&
        // Ensure reservedQuantity changes are reasonable (not negative and not exceeding total quantity)
        request.resource.data.reservedQuantity >= 0 &&
        request.resource.data.reservedQuantity <= request.resource.data.quantity;
    }
    
    // Orders collection - role-based access
    match /orders/{orderId} {
      // All authenticated users can read orders
      allow read: if isAuthenticated();
      
      // Internal users, warehouse staff, and admins can create orders
      allow create: if canCreateOrders();
      
      // Warehouse staff and admins can update/delete orders (same permissions)
      allow update, delete: if hasWarehouseAccess();
    }
    
    // Suppliers collection - warehouse, admin, and supplier access
    match /suppliers/{supplierId} {
      // All authenticated users can read suppliers
      allow read: if isAuthenticated();
      
      // Warehouse staff and admins can modify all suppliers (same permissions)
      allow create, update, delete: if hasWarehouseAccess();
      
      // Suppliers can create and update their own supplier records (for auto-registration)
      allow create, update: if isAuthenticated() && getUserRole(request.auth.uid) == 'supplier' && 
        (request.resource.data.email == request.auth.token.email || resource.data.email == request.auth.token.email);
    }
    
    // Products collection - supplier, warehouse and admin access
    match /products/{productId} {
      // All authenticated users can read products
      allow read: if isAuthenticated();
      
      // Suppliers can create and manage their own products, warehouse staff and admins can modify all (same permissions)
      allow create: if isAuthenticated() && (getUserRole(request.auth.uid) == 'supplier' || hasWarehouseAccess());
      allow update, delete: if isAuthenticated() && (
        (resource.data.supplierId == request.auth.uid && getUserRole(request.auth.uid) == 'supplier') ||
        hasWarehouseAccess()
      );
    }
    
    // Warehouses collection - admin only
    match /warehouses/{warehouseId} {
      // All authenticated users can read warehouses
      allow read: if isAuthenticated();
      
      // Only admins can modify warehouses
      allow create, update, delete: if isAdmin();
    }
    
    // Reports collection - admin only
    match /reports/{reportId} {
      // Only admins can access reports
      allow read, write: if isAdmin();
    }
    
    // Analytics collection - admin only
    match /analytics/{analyticsId} {
      // Only admins can access analytics
      allow read, write: if isAdmin();
    }
    
    // Notifications collection - user-specific access
    match /notifications/{notificationId} {
      // Users can read their own notifications
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Admins can read all notifications
      allow read: if isAdmin();
      
      // System can create notifications (for server-side operations)
      allow create: if isAuthenticated();
      
      // Users can update their own notifications (mark as read)
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Admins can delete notifications
      allow delete: if isAdmin();
    }
    
    // Catalog requests collection - internal user and admin access
    match /catalogRequests/{requestId} {
      // Users can read their own requests, admins can read all
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin() ||
        hasWarehouseAccess()
      );
      
      // Internal users can create catalog requests
      allow create: if isAuthenticated() && getUserRole(request.auth.uid) in ['internal_user', 'admin', 'warehouse_staff'];
      
      // Users can update their own requests, admins and warehouse staff can update all
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin() ||
        hasWarehouseAccess()
      );
      
      // Admins and warehouse staff can delete catalog requests
      allow delete: if isAdmin() || hasWarehouseAccess();
    }
    
    // Audit logs collection - admin read-only
    match /auditLogs/{logId} {
      // Only admins can read audit logs
      allow read: if isAdmin();
      
      // System can create audit logs (for server-side operations)
      allow create: if isAuthenticated();
    }
    
    // Email verifications collection - public access for signup process
    match /emailVerifications/{email} {
      // Anyone can create verification codes (for signup)
      allow create: if true;
      
      // Anyone can read verification data (needed for code verification)
      allow read: if true;
      
      // Anyone can update verification status (mark as verified)
      allow update: if true;
      
      // Allow deletion after verification is complete (cleanup)
      allow delete: if true;
    }
    
    // Email existence check collection - for preventing duplicate signups
    match /emailChecks/{email} {
      // Allow authenticated users to check email existence during signup
      allow read: if request.auth != null;
      
      // System can create email check records
      allow create: if request.auth != null;
      
      // Allow cleanup of email check records
      allow delete: if request.auth != null;
    }
    
    // Shipments collection - warehouse and admin access
    match /shipments/{shipmentId} {
      // All authenticated users can read shipments
      allow read: if isAuthenticated();
      
      // Only warehouse staff and admins can modify shipments
      allow create, update, delete: if hasWarehouseAccess();
    }
    
    // Stock movements collection - warehouse, admin, supplier, and internal user access
    match /stockMovements/{movementId} {
      // All authenticated users can read stock movements
      allow read: if isAuthenticated();
      
      // Warehouse staff and admins can create stock movements (same permissions)
      allow create, update, delete: if hasWarehouseAccess();
      
      // Suppliers can create stock movements (for quantity request responses)
      allow create: if isAuthenticated() && getUserRole(request.auth.uid) == 'supplier';
      
      // Internal users can create stock movements for legitimate operations (reservations, releases, deductions)
      allow create: if isAuthenticated() && 
        getUserRole(request.auth.uid) == 'internal_user' &&
        request.resource.data.reason in ['Stock reserved for order', 'Stock reservation released', 'Order confirmed - stock deducted'];
    }
    
    // Display requests collection - supplier and warehouse access
    match /displayRequests/{requestId} {
      // Suppliers can read their own requests, warehouse staff and admins can read all
      allow read: if isAuthenticated() && (
        resource.data.supplierId == request.auth.uid ||
        hasWarehouseAccess()
      );
      
      // Suppliers can create display requests
      allow create: if isAuthenticated() && getUserRole(request.auth.uid) == 'supplier';
      
      // Warehouse staff and admins can update display requests (approve/reject)
      allow update: if hasWarehouseAccess();
      
      // Suppliers can delete their own pending requests, admins can delete any
      allow delete: if isAuthenticated() && (
        (resource.data.supplierId == request.auth.uid && 
         getUserRole(request.auth.uid) == 'supplier' && 
         resource.data.status == 'pending') ||
        isAdmin()
      );
    }
    
    // Quantity requests collection - supplier and warehouse access
    match /quantityRequests/{requestId} {
      // Suppliers can read their own requests, warehouse staff and admins can read all
      // Also allow requesters to read their own requests
      allow read: if isAuthenticated() && (
        resource.data.supplierId == request.auth.uid ||
        resource.data.requestedBy == request.auth.uid ||
        hasWarehouseAccess()
      );
      
      // Warehouse staff and admins can create quantity requests
      allow create: if hasWarehouseAccess();
      
      // Suppliers can update quantity requests (respond), warehouse staff can update status
      allow update: if isAuthenticated() && (
        (resource.data.supplierId == request.auth.uid && getUserRole(request.auth.uid) == 'supplier') ||
        hasWarehouseAccess()
      );
      
      // Admins and warehouse staff can delete quantity requests
      allow delete: if hasWarehouseAccess();
    }
    
    // Customer orders collection - end user access
    match /customerOrders/{orderId} {
      // Users can read their own orders, warehouse staff and admins can read all
      allow read: if isAuthenticated() && (
        resource.data.customerId == request.auth.uid ||
        hasWarehouseAccess()
      );
      
      // End users can create customer orders
      allow create: if isAuthenticated() && getUserRole(request.auth.uid) == 'end_user';
      
      // Warehouse staff and admins can update customer orders (accept/cancel) - same permissions
      allow update: if hasWarehouseAccess();
      
      // Warehouse staff and admins can delete customer orders (same permissions)
      allow delete: if hasWarehouseAccess();
    }
    
    // Purchase orders collection - supplier and warehouse access
    match /purchaseOrders/{orderId} {
      // Suppliers can read their own orders, warehouse staff and admins can read all
      allow read: if isAuthenticated() && (
        resource.data.supplierId == request.auth.uid ||
        hasWarehouseAccess()
      );
      
      // Warehouse staff and admins can create purchase orders (same permissions)
      allow create: if hasWarehouseAccess();
      
      // Suppliers can update purchase orders (accept/reject), warehouse staff and admins can update status (same permissions)
      allow update: if isAuthenticated() && (
        (resource.data.supplierId == request.auth.uid && getUserRole(request.auth.uid) == 'supplier') ||
        hasWarehouseAccess()
      );
      
      // Warehouse staff and admins can delete purchase orders (same permissions)
      allow delete: if hasWarehouseAccess();
    }
    
    // Default deny rule for any other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}